import unittest

import numpy as np

import causallearn.utils.cit as cit


# TODO : Design more comprehensive test cases, including: design dataset of corner cases.
class TestCIT_KCI(unittest.TestCase):
    def test_Gaussian_dist(self):
        np.random.seed(50)
        X = np.random.randn(300, 1)
        X_prime = np.random.randn(300, 1)
        Y = X + 0.5 * np.random.randn(300, 1)
        Z = Y + 0.5 * np.random.randn(300, 1)
        data = np.hstack((X, X_prime, Y, Z))

        pvalue01 = []
        pvalue03 = []
        pvalue032 = []
        for kernelname in ['Gaussian', 'Polynomial', 'Linear']:
            for est_width in ['empirical', 'median', 'manual']:
                for kwidth in [0.05, 0.1, 0.2]:
                    for use_gp in [True, False]:
                        for approx in [True, False]:
                            for polyd in [1, 2]:
                                cit_CIT = cit.CIT(data, 'kci', kernelX=kernelname, kernelY=kernelname,
                                                  kernelZ=kernelname, est_width=est_width, use_gp=use_gp, approx=approx,
                                                  polyd=polyd, kwidthx=kwidth, kwidthy=kwidth, kwidthz=kwidth)

                                pvalue01.append(round(cit_CIT(0, 1), 3))
                                # X and X_prime are independent, pvalue01 should be expected larger than 0.01
                                pvalue03.append(round(cit_CIT(0, 3), 3))
                                # X and Z are dependent, pvalue03 should be expected smaller than 0.01
                                pvalue032.append(round(cit_CIT(0, 3, {2}), 3))
                                # X and Z are independent conditional on Y, pvalue032 should be expected larger than 0.01

        pvalue01_truth = [0.17, 0.17, 0.187, 0.169, 0.17, 0.17, 0.139, 0.191, 0.17, 0.17, 0.163, 0.169, 0.17, 0.17,
                          0.154, 0.179, 0.17, 0.17, 0.167, 0.167, 0.17, 0.17, 0.163, 0.169, 0.557, 0.557, 0.533, 0.552,
                          0.557, 0.557, 0.524, 0.549, 0.557, 0.557, 0.546, 0.557, 0.557, 0.557, 0.568, 0.528, 0.557,
                          0.557, 0.528, 0.554, 0.557, 0.557, 0.537, 0.537, 0.17, 0.17, 0.167, 0.153, 0.17, 0.17, 0.168,
                          0.18, 0.095, 0.095, 0.092, 0.104, 0.095, 0.095, 0.093, 0.091, 0.117, 0.117, 0.122, 0.119,
                          0.117, 0.117, 0.113, 0.106, 0.636, 0.953, 0.64, 0.955, 0.636, 0.953, 0.618, 0.956, 0.636,
                          0.953, 0.629, 0.95, 0.636, 0.953, 0.643, 0.963, 0.636, 0.953, 0.626, 0.958, 0.636, 0.953,
                          0.622, 0.951, 0.636, 0.953, 0.629, 0.946, 0.636, 0.953, 0.636, 0.962, 0.636, 0.953, 0.634,
                          0.957, 0.636, 0.953, 0.626, 0.955, 0.636, 0.953, 0.637, 0.955, 0.636, 0.953, 0.626, 0.947,
                          0.636, 0.953, 0.628, 0.957, 0.636, 0.953, 0.667, 0.961, 0.636, 0.953, 0.651, 0.951, 0.636,
                          0.953, 0.626, 0.951, 0.636, 0.953, 0.655, 0.971, 0.636, 0.953, 0.644, 0.951, 0.636, 0.636,
                          0.613, 0.609, 0.636, 0.636, 0.599, 0.641, 0.636, 0.636, 0.608, 0.644, 0.636, 0.636, 0.663,
                          0.645, 0.636, 0.636, 0.645, 0.647, 0.636, 0.636, 0.626, 0.649, 0.636, 0.636, 0.628, 0.641,
                          0.636, 0.636, 0.625, 0.615, 0.636, 0.636, 0.657, 0.658, 0.636, 0.636, 0.649, 0.621, 0.636,
                          0.636, 0.641, 0.633, 0.636, 0.636, 0.653, 0.613, 0.636, 0.636, 0.605, 0.65, 0.636, 0.636,
                          0.647, 0.644, 0.636, 0.636, 0.623, 0.622, 0.636, 0.636, 0.638, 0.617, 0.636, 0.636, 0.654,
                          0.644, 0.636, 0.636, 0.644, 0.617]
        pvalue03_truth = [0.0] * (3 * 3 * 3 * 2 * 2 * 2)
        pvalue032_truth = [0.277, 0.277, 0.242, 0.263, 0.307, 0.307, 0.296, 0.282, 0.277, 0.277, 0.267, 0.256, 0.307,
                           0.307, 0.278, 0.301, 0.277, 0.277, 0.259, 0.256, 0.307, 0.307, 0.29, 0.275, 0.649, 0.649,
                           0.656, 0.649, 0.646, 0.646, 0.649, 0.654, 0.649, 0.649, 0.644, 0.654, 0.646, 0.646, 0.661,
                           0.652, 0.649, 0.649, 0.654, 0.655, 0.646, 0.646, 0.651, 0.653, 0.283, 0.283, 0.275, 0.276,
                           0.0, 0.0, 0.0, 0.001, 0.17, 0.17, 0.181, 0.176, 0.006, 0.006, 0.006, 0.006, 0.154, 0.154,
                           0.157, 0.157, 0.054, 0.054, 0.051, 0.057, 0.816, 0.578, 0.815, 0.587, 0.816, 0.578, 0.817,
                           0.58, 0.816, 0.578, 0.813, 0.595, 0.816, 0.578, 0.814, 0.587, 0.816, 0.578, 0.821, 0.593,
                           0.816, 0.578, 0.819, 0.587, 0.816, 0.578, 0.825, 0.588, 0.816, 0.578, 0.822, 0.593, 0.816,
                           0.578, 0.818, 0.589, 0.816, 0.578, 0.811, 0.596, 0.816, 0.578, 0.818, 0.601, 0.816, 0.578,
                           0.822, 0.578, 0.816, 0.578, 0.822, 0.583, 0.816, 0.578, 0.812, 0.592, 0.816, 0.578, 0.812,
                           0.578, 0.816, 0.578, 0.806, 0.578, 0.816, 0.578, 0.821, 0.591, 0.816, 0.578, 0.824, 0.584,
                           0.816, 0.816, 0.813, 0.818, 0.816, 0.816, 0.803, 0.804, 0.816, 0.816, 0.824, 0.808, 0.816,
                           0.816, 0.819, 0.816, 0.816, 0.816, 0.813, 0.81, 0.816, 0.816, 0.823, 0.801, 0.816, 0.816,
                           0.804, 0.818, 0.816, 0.816, 0.825, 0.811, 0.816, 0.816, 0.817, 0.81, 0.816, 0.816, 0.812,
                           0.808, 0.816, 0.816, 0.815, 0.816, 0.816, 0.816, 0.819, 0.817, 0.816, 0.816, 0.821, 0.824,
                           0.816, 0.816, 0.811, 0.819, 0.816, 0.816, 0.815, 0.808, 0.816, 0.816, 0.812, 0.809, 0.816,
                           0.816, 0.812, 0.812, 0.816, 0.816, 0.81, 0.807]

        self.assertEqual(pvalue01, pvalue01_truth)
        self.assertEqual(pvalue03, pvalue03_truth)
        self.assertEqual(pvalue032, pvalue032_truth)

    def test_Exponential_dist(self):
        np.random.seed(50)
        X = np.random.exponential(size=(300, 1))
        X_prime = np.random.exponential(size=(300, 1))
        Y = X + 0.5 * np.random.exponential(size=(300, 1))
        Z = Y + 0.5 * np.random.exponential(size=(300, 1))
        data = np.hstack((X, X_prime, Y, Z))

        pvalue01 = []
        pvalue03 = []
        pvalue032 = []
        for kernelname in ['Gaussian', 'Polynomial', 'Linear']:
            for est_width in ['empirical', 'median', 'manual']:
                for kwidth in [0.05, 0.1, 0.2]:
                    for use_gp in [True, False]:
                        for approx in [True, False]:
                            for polyd in [1, 2]:
                                cit_CIT = cit.CIT(data, 'kci', kernelX=kernelname, kernelY=kernelname,
                                                  kernelZ=kernelname, est_width=est_width, use_gp=use_gp, approx=approx,
                                                  polyd=polyd, kwidthx=kwidth, kwidthy=kwidth, kwidthz=kwidth)

                                pvalue01.append(round(cit_CIT(0, 1), 3))
                                # X and X_prime are independent, pvalue01 should be expected larger than 0.01
                                pvalue03.append(round(cit_CIT(0, 3), 3))
                                # X and Z are dependent, pvalue03 should be expected smaller than 0.01
                                pvalue032.append(round(cit_CIT(0, 3, {2}), 3))
                                # X and Z are independent conditional on Y, pvalue032 should be expected larger than 0.01

        pvalue01_truth = [0.001, 0.001, 0.005, 0.007, 0.001, 0.001, 0.004, 0.001, 0.001, 0.001, 0.003, 0.006, 0.001,
                          0.001, 0.004, 0.007, 0.001, 0.001, 0.004, 0.003, 0.001, 0.001, 0.004, 0.003, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.001, 0.0, 0.0, 0.001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002,
                          0.0, 0.0, 0.0, 0.0, 0.45, 0.45, 0.441, 0.447, 0.45, 0.45, 0.46, 0.435, 0.218, 0.218, 0.219,
                          0.213, 0.218, 0.218, 0.21, 0.213, 0.11, 0.11, 0.096, 0.111, 0.11, 0.11, 0.09, 0.103, 0.012,
                          0.37, 0.015, 0.331, 0.012, 0.37, 0.018, 0.332, 0.012, 0.37, 0.013, 0.332, 0.012, 0.37, 0.004,
                          0.34, 0.012, 0.37, 0.009, 0.352, 0.012, 0.37, 0.008, 0.372, 0.012, 0.37, 0.01, 0.323, 0.012,
                          0.37, 0.012, 0.332, 0.012, 0.37, 0.007, 0.324, 0.012, 0.37, 0.011, 0.332, 0.012, 0.37, 0.014,
                          0.349, 0.012, 0.37, 0.014, 0.342, 0.012, 0.37, 0.014, 0.339, 0.012, 0.37, 0.009, 0.334, 0.012,
                          0.37, 0.011, 0.374, 0.012, 0.37, 0.012, 0.347, 0.012, 0.37, 0.021, 0.354, 0.012, 0.37, 0.005,
                          0.32, 0.012, 0.012, 0.016, 0.01, 0.012, 0.012, 0.012, 0.015, 0.012, 0.012, 0.016, 0.009,
                          0.012, 0.012, 0.006, 0.017, 0.012, 0.012, 0.014, 0.01, 0.012, 0.012, 0.011, 0.005, 0.012,
                          0.012, 0.015, 0.008, 0.012, 0.012, 0.019, 0.014, 0.012, 0.012, 0.016, 0.011, 0.012, 0.012,
                          0.004, 0.012, 0.012, 0.012, 0.011, 0.007, 0.012, 0.012, 0.016, 0.009, 0.012, 0.012, 0.015,
                          0.014, 0.012, 0.012, 0.011, 0.018, 0.012, 0.012, 0.012, 0.009, 0.012, 0.012, 0.006, 0.009,
                          0.012, 0.012, 0.011, 0.008, 0.012, 0.012, 0.01, 0.008]
        pvalue03_truth = [0.0] * (3 * 3 * 3 * 2 * 2 * 2)
        pvalue032_truth = [0.377, 0.377, 0.348, 0.351, 0.403, 0.403, 0.379, 0.379, 0.377, 0.377, 0.359, 0.342, 0.403,
                           0.403, 0.379, 0.386, 0.377, 0.377, 0.347, 0.366, 0.403, 0.403, 0.385, 0.373, 0.651, 0.651,
                           0.654, 0.666, 0.647, 0.647, 0.656, 0.652, 0.651, 0.651, 0.634, 0.648, 0.647, 0.647, 0.651,
                           0.647, 0.651, 0.651, 0.657, 0.655, 0.647, 0.647, 0.654, 0.646, 0.555, 0.555, 0.57, 0.548,
                           0.019, 0.019, 0.017, 0.017, 0.65, 0.65, 0.644, 0.652, 0.216, 0.216, 0.214, 0.219, 0.588,
                           0.588, 0.573, 0.567, 0.428, 0.428, 0.402, 0.426, 0.288, 0.616, 0.289, 0.611, 0.288, 0.616,
                           0.286, 0.614, 0.288, 0.616, 0.29, 0.618, 0.288, 0.616, 0.298, 0.612, 0.288, 0.616, 0.282,
                           0.615, 0.288, 0.616, 0.292, 0.603, 0.288, 0.616, 0.298, 0.625, 0.288, 0.616, 0.284, 0.606,
                           0.288, 0.616, 0.283, 0.614, 0.288, 0.616, 0.292, 0.616, 0.288, 0.616, 0.289, 0.621, 0.288,
                           0.616, 0.287, 0.615, 0.288, 0.616, 0.293, 0.62, 0.288, 0.616, 0.29, 0.624, 0.288, 0.616,
                           0.288, 0.611, 0.288, 0.616, 0.292, 0.615, 0.288, 0.616, 0.3, 0.625, 0.288, 0.616, 0.302,
                           0.63, 0.288, 0.288, 0.283, 0.29, 0.288, 0.288, 0.282, 0.3, 0.288, 0.288, 0.286, 0.288,
                           0.288, 0.288, 0.287, 0.273, 0.288, 0.288, 0.281, 0.281, 0.288, 0.288, 0.289, 0.29, 0.288,
                           0.288, 0.29, 0.282, 0.288, 0.288, 0.278, 0.282, 0.288, 0.288, 0.283, 0.284, 0.288, 0.288,
                           0.285, 0.285, 0.288, 0.288, 0.292, 0.293, 0.288, 0.288, 0.294, 0.296, 0.288, 0.288, 0.282,
                           0.292, 0.288, 0.288, 0.297, 0.282, 0.288, 0.288, 0.292, 0.294, 0.288, 0.288, 0.298, 0.281,
                           0.288, 0.288, 0.296, 0.281, 0.288, 0.288, 0.287, 0.294]

        self.assertEqual(pvalue01, pvalue01_truth)
        self.assertEqual(pvalue03, pvalue03_truth)
        self.assertEqual(pvalue032, pvalue032_truth)

    def test_Uniform_dist(self):
        np.random.seed(50)
        X = np.random.uniform(size=(300, 1))
        X_prime = np.random.uniform(size=(300, 1))
        Y = X + 0.5 * np.random.uniform(size=(300, 1))
        Z = Y + 0.5 * np.random.uniform(size=(300, 1))
        data = np.hstack((X, X_prime, Y, Z))

        pvalue01 = []
        pvalue03 = []
        pvalue032 = []
        for kernelname in ['Gaussian', 'Polynomial', 'Linear']:
            for est_width in ['empirical', 'median', 'manual']:
                for kwidth in [0.05, 0.1, 0.2]:
                    for use_gp in [True, False]:
                        for approx in [True, False]:
                            for polyd in [1, 2]:
                                cit_CIT = cit.CIT(data, 'kci', kernelX=kernelname, kernelY=kernelname,
                                                  kernelZ=kernelname, est_width=est_width, use_gp=use_gp, approx=approx,
                                                  polyd=polyd, kwidthx=kwidth, kwidthy=kwidth, kwidthz=kwidth)

                                pvalue01.append(round(cit_CIT(0, 1), 3))
                                # X and X_prime are independent, pvalue01 should be expected larger than 0.01
                                pvalue03.append(round(cit_CIT(0, 3), 3))
                                # X and Z are dependent, pvalue03 should be expected smaller than 0.01
                                pvalue032.append(round(cit_CIT(0, 3, {2}), 3))
                                # X and Z are independent conditional on Y, pvalue032 should be expected larger than 0.01

        pvalue01_truth = [0.008, 0.008, 0.012, 0.017, 0.008, 0.008, 0.016, 0.013, 0.008, 0.008, 0.013, 0.005, 0.008,
                          0.008, 0.013, 0.018, 0.008, 0.008, 0.014, 0.012, 0.008, 0.008, 0.008, 0.011, 0.014, 0.014,
                          0.011, 0.011, 0.014, 0.014, 0.015, 0.019, 0.014, 0.014, 0.017, 0.02, 0.014, 0.014, 0.022,
                          0.022, 0.014, 0.014, 0.015, 0.018, 0.014, 0.014, 0.019, 0.014, 0.618, 0.618, 0.62, 0.625,
                          0.618, 0.618, 0.604, 0.622, 0.295, 0.295, 0.304, 0.306, 0.295, 0.295, 0.288, 0.274, 0.065,
                          0.065, 0.066, 0.049, 0.065, 0.065, 0.068, 0.073, 0.001, 0.0, 0.0, 0.001, 0.001, 0.0, 0.001,
                          0.0, 0.001, 0.0, 0.002, 0.001, 0.001, 0.0, 0.0, 0.001, 0.001, 0.0, 0.0, 0.001, 0.001, 0.0,
                          0.001, 0.002, 0.001, 0.0, 0.0, 0.001, 0.001, 0.0, 0.002, 0.001, 0.001, 0.0, 0.001, 0.003,
                          0.001, 0.0, 0.001, 0.003, 0.001, 0.0, 0.001, 0.001, 0.001, 0.0, 0.0, 0.001, 0.001, 0.0,
                          0.001, 0.001, 0.001, 0.0, 0.002, 0.0, 0.001, 0.0, 0.003, 0.002, 0.001, 0.0, 0.001, 0.0,
                          0.001, 0.0, 0.001, 0.003, 0.001, 0.0, 0.001, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                          0.002, 0.002, 0.001, 0.001, 0.001, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001,
                          0.0, 0.001, 0.001, 0.0, 0.001, 0.001, 0.001, 0.0, 0.0, 0.001, 0.001, 0.0, 0.001, 0.001,
                          0.001, 0.001, 0.0, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.0, 0.001, 0.001, 0.0,
                          0.001, 0.001, 0.001, 0.001, 0.0, 0.001, 0.001, 0.0, 0.002, 0.001, 0.001, 0.001, 0.002, 0.001,
                          0.001, 0.0, 0.0, 0.001, 0.001, 0.0, 0.0, 0.001, 0.001, 0.0, 0.0]
        pvalue03_truth = [0.0] * (3 * 3 * 3 * 2 * 2 * 2)
        pvalue032_truth = [0.577, 0.577, 0.568, 0.576, 0.538, 0.538, 0.519, 0.522, 0.577, 0.577, 0.565, 0.571, 0.538,
                           0.538, 0.526, 0.518, 0.577, 0.577, 0.572, 0.569, 0.538, 0.538, 0.538, 0.527, 0.297, 0.297,
                           0.276, 0.279, 0.31, 0.31, 0.294, 0.285, 0.297, 0.297, 0.288, 0.279, 0.31, 0.31, 0.301,
                           0.287, 0.297, 0.297, 0.277, 0.281, 0.31, 0.31, 0.293, 0.291, 0.548, 0.548, 0.539, 0.544,
                           0.001, 0.001, 0.002, 0.003, 0.646, 0.646, 0.646, 0.638, 0.136, 0.136, 0.139, 0.133, 0.886,
                           0.886, 0.896, 0.902, 0.704, 0.704, 0.701, 0.693, 0.161, 0.698, 0.162, 0.718, 0.161, 0.698,
                           0.166, 0.712, 0.161, 0.698, 0.16, 0.71, 0.161, 0.698, 0.164, 0.702, 0.161, 0.698, 0.16,
                           0.72, 0.161, 0.698, 0.163, 0.71, 0.161, 0.698, 0.161, 0.716, 0.161, 0.698, 0.161, 0.71,
                           0.161, 0.698, 0.163, 0.722, 0.161, 0.698, 0.169, 0.718, 0.161, 0.698, 0.17, 0.7, 0.161,
                           0.698, 0.173, 0.726, 0.161, 0.698, 0.166, 0.709, 0.161, 0.698, 0.158, 0.701, 0.161, 0.698,
                           0.161, 0.71, 0.161, 0.698, 0.154, 0.7, 0.161, 0.698, 0.166, 0.708, 0.161, 0.698, 0.167,
                           0.713, 0.161, 0.161, 0.161, 0.162, 0.161, 0.161, 0.173, 0.161, 0.161, 0.161, 0.163, 0.162,
                           0.161, 0.161, 0.161, 0.16, 0.161, 0.161, 0.17, 0.149, 0.161, 0.161, 0.159, 0.155, 0.161,
                           0.161, 0.162, 0.169, 0.161, 0.161, 0.162, 0.156, 0.161, 0.161, 0.157, 0.157, 0.161, 0.161,
                           0.156, 0.154, 0.161, 0.161, 0.159, 0.159, 0.161, 0.161, 0.152, 0.165, 0.161, 0.161, 0.16,
                           0.162, 0.161, 0.161, 0.162, 0.163, 0.161, 0.161, 0.163, 0.168, 0.161, 0.161, 0.159, 0.163,
                           0.161, 0.161, 0.154, 0.153, 0.161, 0.161, 0.16, 0.16]

        self.assertEqual(pvalue01, pvalue01_truth)
        self.assertEqual(pvalue03, pvalue03_truth)
        self.assertEqual(pvalue032, pvalue032_truth)

    def test_Mixed_dist(self):
        np.random.seed(50)
        X = np.random.uniform(size=(300, 1))
        X_prime = np.random.randn(300, 1)
        Y = X + 0.5 * np.random.exponential(size=(300, 1))
        Z = Y + 0.5 * np.random.randn(300, 1)
        data = np.hstack((X, X_prime, Y, Z))

        pvalue01 = []
        pvalue03 = []
        pvalue032 = []
        for kernelname in ['Gaussian', 'Polynomial', 'Linear']:
            for est_width in ['empirical', 'median', 'manual']:
                for kwidth in [0.05, 0.1, 0.2]:
                    for use_gp in [True, False]:
                        for approx in [True, False]:
                            for polyd in [1, 2]:
                                cit_CIT = cit.CIT(data, 'kci', kernelX=kernelname, kernelY=kernelname,
                                                  kernelZ=kernelname, est_width=est_width, use_gp=use_gp, approx=approx,
                                                  polyd=polyd, kwidthx=kwidth, kwidthy=kwidth, kwidthz=kwidth)

                                pvalue01.append(round(cit_CIT(0, 1), 3))
                                # X and X_prime are independent, pvalue01 should be expected larger than 0.01
                                pvalue03.append(round(cit_CIT(0, 3), 3))
                                # X and Z are dependent, pvalue03 should be expected smaller than 0.01
                                pvalue032.append(round(cit_CIT(0, 3, {2}), 3))
                                # X and Z are independent conditional on Y, pvalue032 should be expected larger than 0.01

        pvalue01_truth = [0.049, 0.049, 0.049, 0.058, 0.049, 0.049, 0.057, 0.052, 0.049, 0.049, 0.056, 0.043, 0.049,
                          0.049, 0.051, 0.038, 0.049, 0.049, 0.056, 0.055, 0.049, 0.049, 0.054, 0.04, 0.054, 0.054,
                          0.058, 0.055, 0.054, 0.054, 0.069, 0.058, 0.054, 0.054, 0.053, 0.054, 0.054, 0.054, 0.058,
                          0.056, 0.054, 0.054, 0.051, 0.062, 0.054, 0.054, 0.065, 0.063, 0.535, 0.535, 0.531, 0.517,
                          0.535, 0.535, 0.517, 0.548, 0.291, 0.291, 0.298, 0.281, 0.291, 0.291, 0.291, 0.273, 0.16,
                          0.16, 0.157, 0.159, 0.16, 0.16, 0.156, 0.163, 0.138, 0.052, 0.145, 0.046, 0.138, 0.052,
                          0.142, 0.046, 0.138, 0.052, 0.13, 0.045, 0.138, 0.052, 0.132, 0.065, 0.138, 0.052, 0.132,
                          0.058, 0.138, 0.052, 0.131, 0.049, 0.138, 0.052, 0.157, 0.054, 0.138, 0.052, 0.14, 0.062,
                          0.138, 0.052, 0.143, 0.043, 0.138, 0.052, 0.128, 0.055, 0.138, 0.052, 0.13, 0.047, 0.138,
                          0.052, 0.142, 0.039, 0.138, 0.052, 0.144, 0.053, 0.138, 0.052, 0.162, 0.05, 0.138, 0.052,
                          0.117, 0.047, 0.138, 0.052, 0.133, 0.048, 0.138, 0.052, 0.154, 0.048, 0.138, 0.052, 0.12,
                          0.051, 0.138, 0.138, 0.129, 0.123, 0.138, 0.138, 0.133, 0.132, 0.138, 0.138, 0.114, 0.137,
                          0.138, 0.138, 0.145, 0.148, 0.138, 0.138, 0.126, 0.15, 0.138, 0.138, 0.153, 0.147, 0.138,
                          0.138, 0.146, 0.128, 0.138, 0.138, 0.138, 0.147, 0.138, 0.138, 0.136, 0.133, 0.138, 0.138,
                          0.124, 0.141, 0.138, 0.138, 0.132, 0.143, 0.138, 0.138, 0.128, 0.153, 0.138, 0.138, 0.126,
                          0.139, 0.138, 0.138, 0.151, 0.13, 0.138, 0.138, 0.128, 0.143, 0.138, 0.138, 0.148, 0.148,
                          0.138, 0.138, 0.146, 0.144, 0.138, 0.138, 0.148, 0.167]
        pvalue03_truth = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.062, 0.062, 0.076, 0.071,
                          0.062, 0.062, 0.056, 0.067, 0.051, 0.051, 0.054, 0.036, 0.051, 0.051, 0.037, 0.043, 0.0,
                          0.0, 0.003, 0.0, 0.0, 0.0, 0.001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        pvalue032_truth = [0.659, 0.659, 0.662, 0.657, 0.672, 0.672, 0.673, 0.672, 0.659, 0.659, 0.658, 0.658, 0.672,
                           0.672, 0.677, 0.679, 0.659, 0.659, 0.66, 0.655, 0.672, 0.672, 0.67, 0.656, 0.634, 0.634,
                           0.645, 0.649, 0.648, 0.648, 0.66, 0.64, 0.634, 0.634, 0.628, 0.647, 0.648, 0.648, 0.667,
                           0.649, 0.634, 0.634, 0.626, 0.64, 0.648, 0.648, 0.644, 0.656, 0.443, 0.443, 0.446, 0.439,
                           0.004, 0.004, 0.004, 0.004, 0.372, 0.372, 0.362, 0.366, 0.048, 0.048, 0.05, 0.053, 0.548,
                           0.548, 0.538, 0.546, 0.299, 0.299, 0.292, 0.277, 0.879, 0.098, 0.874, 0.089, 0.879, 0.098,
                           0.874, 0.089, 0.879, 0.098, 0.886, 0.087, 0.879, 0.098, 0.876, 0.087, 0.879, 0.098, 0.88,
                           0.091, 0.879, 0.098, 0.887, 0.096, 0.879, 0.098, 0.887, 0.085, 0.879, 0.098, 0.882, 0.09,
                           0.879, 0.098, 0.88, 0.09, 0.879, 0.098, 0.873, 0.089, 0.879, 0.098, 0.878, 0.091, 0.879,
                           0.098, 0.88, 0.093, 0.879, 0.098, 0.88, 0.096, 0.879, 0.098, 0.877, 0.089, 0.879, 0.098,
                           0.878, 0.092, 0.879, 0.098, 0.881, 0.091, 0.879, 0.098, 0.876, 0.089, 0.879, 0.098, 0.882,
                           0.088, 0.879, 0.879, 0.872, 0.879, 0.879, 0.879, 0.883, 0.88, 0.879, 0.879, 0.881, 0.885,
                           0.879, 0.879, 0.876, 0.881, 0.879, 0.879, 0.886, 0.876, 0.879, 0.879, 0.876, 0.885, 0.879,
                           0.879, 0.875, 0.872, 0.879, 0.879, 0.876, 0.872, 0.879, 0.879, 0.881, 0.877, 0.879, 0.879,
                           0.88, 0.883, 0.879, 0.879, 0.879, 0.88, 0.879, 0.879, 0.886, 0.883, 0.879, 0.879, 0.882,
                           0.872, 0.879, 0.879, 0.872, 0.882, 0.879, 0.879, 0.877, 0.879, 0.879, 0.879, 0.883, 0.878,
                           0.879, 0.879, 0.875, 0.883, 0.879, 0.879, 0.883, 0.888]

        self.assertEqual(pvalue01, pvalue01_truth)
        self.assertEqual(pvalue03, pvalue03_truth)
        self.assertEqual(pvalue032, pvalue032_truth)
