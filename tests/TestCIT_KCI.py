import unittest

import numpy as np

import causallearn.utils.cit as cit


# TODO : Design more comprehensive test cases, including: design dataset of corner cases.
class TestCIT_KCI(unittest.TestCase):
    def test_Gaussian_dist(self):
        np.random.seed(10)
        X = np.random.randn(300, 1)
        X_prime = np.random.randn(300, 1)
        Y = X + 0.5 * np.random.randn(300, 1)
        Z = Y + 0.5 * np.random.randn(300, 1)
        data = np.hstack((X, X_prime, Y, Z))

        pvalue01 = []
        pvalue03 = []
        pvalue032 = []
        for kernelname in ['Gaussian', 'Polynomial', 'Linear']:
            for est_width in ['empirical', 'median', 'manual']:
                for kwidth in [0.05, 0.1, 0.2]:
                    for use_gp in [True, False]:
                        for approx in [True, False]:
                            for polyd in [1, 2]:
                                cit_CIT = cit.CIT(data, 'kci', kernelX=kernelname, kernelY=kernelname,
                                                  kernelZ=kernelname, est_width=est_width, use_gp=use_gp, approx=approx,
                                                  polyd=polyd, kwidthx=kwidth, kwidthy=kwidth, kwidthz=kwidth)
                                pvalue01.append(round(cit_CIT(0, 1), 4))
                                # X and X_prime are independent, pvalue01 should be expected larger than 0.01
                                pvalue03.append(round(cit_CIT(0, 3), 4))
                                # X and Z are dependent, pvalue03 should be expected smaller than 0.01
                                pvalue032.append(round(cit_CIT(0, 3, {2}), 4))
                                # X and Z are independent conditional on Y, pvalue032 should be expected larger than
                                # 0.01
        pvalue01_truth = [0.5404, 0.5404, 0.507, 0.501, 0.5404, 0.5404, 0.516, 0.536, 0.5404, 0.5404, 0.506, 0.517,
                          0.5404, 0.5404, 0.526, 0.526, 0.5404, 0.5404, 0.492, 0.507, 0.5404, 0.5404, 0.529, 0.511,
                          0.6106, 0.6106, 0.633, 0.594, 0.6106, 0.6106, 0.612, 0.59, 0.6106, 0.6106, 0.595, 0.59,
                          0.6106, 0.6106, 0.606, 0.589, 0.6106, 0.6106, 0.616, 0.587, 0.6106, 0.6106, 0.595, 0.596,
                          0.4664, 0.4664, 0.467, 0.481, 0.4664, 0.4664, 0.442, 0.443, 0.6452, 0.6452, 0.633, 0.624,
                          0.6452, 0.6452, 0.629, 0.659, 0.7733, 0.7733, 0.762, 0.765, 0.7733, 0.7733, 0.748, 0.787,
                          0.2745, 0.1613, 0.269, 0.145, 0.2745, 0.1613, 0.245, 0.144, 0.2745, 0.1613, 0.285, 0.173,
                          0.2745, 0.1613, 0.289, 0.155, 0.2745, 0.1613, 0.268, 0.162, 0.2745, 0.1613, 0.248, 0.159,
                          0.2745, 0.1613, 0.262, 0.156, 0.2745, 0.1613, 0.249, 0.168, 0.2745, 0.1613, 0.289, 0.17,
                          0.2745, 0.1613, 0.272, 0.163, 0.2745, 0.1613, 0.277, 0.168, 0.2745, 0.1613, 0.285, 0.154,
                          0.2745, 0.1613, 0.294, 0.16, 0.2745, 0.1613, 0.292, 0.155, 0.2745, 0.1613, 0.273, 0.169,
                          0.2745, 0.1613, 0.304, 0.166, 0.2745, 0.1613, 0.298, 0.162, 0.2745, 0.1613, 0.27, 0.152,
                          0.2745, 0.2745, 0.265, 0.276, 0.2745, 0.2745, 0.272, 0.269, 0.2745, 0.2745, 0.291, 0.291,
                          0.2745, 0.2745, 0.284, 0.26, 0.2745, 0.2745, 0.261, 0.274, 0.2745, 0.2745, 0.297, 0.244,
                          0.2745, 0.2745, 0.298, 0.274, 0.2745, 0.2745, 0.271, 0.292, 0.2745, 0.2745, 0.302, 0.31,
                          0.2745, 0.2745, 0.262, 0.281, 0.2745, 0.2745, 0.256, 0.285, 0.2745, 0.2745, 0.299, 0.26,
                          0.2745, 0.2745, 0.26, 0.251, 0.2745, 0.2745, 0.279, 0.282, 0.2745, 0.2745, 0.244, 0.286,
                          0.2745, 0.2745, 0.293, 0.263, 0.2745, 0.2745, 0.263, 0.263, 0.2745, 0.2745, 0.29, 0.299]
        pvalue03_truth = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0034, 0.0034, 0.005, 0.003,
                          0.0034, 0.0034, 0.004, 0.004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0]
        pvalue032_truth = [0.6087, 0.6087, 0.5956, 0.6, 0.5807, 0.5807, 0.583, 0.5612, 0.6087, 0.6087, 0.5952, 0.5918,
                           0.5807, 0.5807, 0.567, 0.5744, 0.6087, 0.6087, 0.5944, 0.6074, 0.5807, 0.5807, 0.5878,
                           0.5558, 0.6164, 0.6164, 0.6252, 0.628, 0.6179, 0.6179, 0.6158, 0.6076, 0.6164, 0.6164,
                           0.617, 0.6208, 0.6179, 0.6179, 0.6152, 0.6154, 0.6164, 0.6164, 0.6108, 0.6196, 0.6179,
                           0.6179, 0.6384, 0.6198, 0.5406, 0.5406, 0.5622, 0.5504, 0.0023, 0.0023, 0.003, 0.0028,
                           0.6761, 0.6761, 0.6776, 0.6752, 0.0835, 0.0835, 0.0838, 0.0856, 0.8561, 0.8561, 0.8604,
                           0.8602, 0.6973, 0.6973, 0.6932, 0.683, 0.9111, 0.247, 0.9086, 0.2338, 0.9111, 0.247, 0.917,
                           0.2356, 0.9111, 0.247, 0.9132, 0.2304, 0.9111, 0.247, 0.9068, 0.234, 0.9111, 0.247, 0.9206,
                           0.2284, 0.9111, 0.247, 0.9106, 0.2428, 0.9111, 0.247, 0.9082, 0.2362, 0.9111, 0.247, 0.9088,
                           0.2368, 0.9111, 0.247, 0.9114, 0.2326, 0.9111, 0.247, 0.9076, 0.2252, 0.9111, 0.247, 0.9018,
                           0.2234, 0.9111, 0.247, 0.9082, 0.2316, 0.9111, 0.247, 0.9174, 0.237, 0.9111, 0.247, 0.9168,
                           0.2246, 0.9111, 0.247, 0.912, 0.2232, 0.9111, 0.247, 0.9126, 0.2334, 0.9111, 0.247, 0.914,
                           0.2178, 0.9111, 0.247, 0.9098, 0.2396, 0.9111, 0.9111, 0.9146, 0.914, 0.9111, 0.9111,
                           0.9116, 0.9146, 0.9111, 0.9111, 0.9112, 0.9098, 0.9111, 0.9111, 0.9112, 0.9082, 0.9111,
                           0.9111, 0.905, 0.9116, 0.9111, 0.9111, 0.9062, 0.9058, 0.9111, 0.9111, 0.9106, 0.9154,
                           0.9111, 0.9111, 0.9196, 0.911, 0.9111, 0.9111, 0.9148, 0.9108, 0.9111, 0.9111, 0.912,
                           0.9066, 0.9111, 0.9111, 0.9162, 0.9136, 0.9111, 0.9111, 0.9104, 0.9106, 0.9111, 0.9111,
                           0.9156, 0.9116, 0.9111, 0.9111, 0.9178, 0.915, 0.9111, 0.9111, 0.9068, 0.9042, 0.9111,
                           0.9111, 0.9096, 0.9136, 0.9111, 0.9111, 0.907, 0.9034, 0.9111, 0.9111, 0.9072, 0.914]
        self.assertEqual(pvalue01, pvalue01_truth)
        self.assertEqual(pvalue03, pvalue03_truth)
        self.assertEqual(pvalue032, pvalue032_truth)

    def test_Exponential_dist(self):
        np.random.seed(10)
        X = np.random.exponential(size=(300, 1))
        X_prime = np.random.exponential(size=(300, 1))
        Y = X + 0.5 * np.random.exponential(size=(300, 1))
        Z = Y + 0.5 * np.random.exponential(size=(300, 1))
        data = np.hstack((X, X_prime, Y, Z))

        pvalue01 = []
        pvalue03 = []
        pvalue032 = []
        for kernelname in ['Gaussian', 'Polynomial', 'Linear']:
            for est_width in ['empirical', 'median', 'manual']:
                for kwidth in [0.05, 0.1, 0.2]:
                    for use_gp in [True, False]:
                        for approx in [True, False]:
                            for polyd in [1, 2]:
                                cit_CIT = cit.CIT(data, 'kci', kernelX=kernelname, kernelY=kernelname,
                                                  kernelZ=kernelname, est_width=est_width, use_gp=use_gp, approx=approx,
                                                  polyd=polyd, kwidthx=kwidth, kwidthy=kwidth, kwidthz=kwidth)
                                pvalue01.append(round(cit_CIT(0, 1), 4))
                                # X and X_prime are independent, pvalue01 should be expected larger than 0.01
                                pvalue03.append(round(cit_CIT(0, 3), 4))
                                # X and Z are dependent, pvalue03 should be expected smaller than 0.01
                                pvalue032.append(round(cit_CIT(0, 3, {2}), 4))
                                # X and Z are independent conditional on Y, pvalue032 should be expected larger than
                                # 0.01
        pvalue01_truth = [0.8513, 0.8513, 0.872, 0.873, 0.8513, 0.8513, 0.871, 0.897, 0.8513, 0.8513, 0.879, 0.886,
                          0.8513, 0.8513, 0.889, 0.891, 0.8513, 0.8513, 0.872, 0.876, 0.8513, 0.8513, 0.853, 0.866,
                          0.5809, 0.5809, 0.573, 0.568, 0.5809, 0.5809, 0.548, 0.571, 0.5809, 0.5809, 0.593, 0.588,
                          0.5809, 0.5809, 0.577, 0.577, 0.5809, 0.5809, 0.581, 0.57, 0.5809, 0.5809, 0.596, 0.598,
                          0.4553, 0.4553, 0.436, 0.443, 0.4553, 0.4553, 0.417, 0.488, 0.4201, 0.4201, 0.421, 0.42,
                          0.4201, 0.4201, 0.425, 0.404, 0.8815, 0.8815, 0.903, 0.891, 0.8815, 0.8815, 0.898, 0.905,
                          0.8219, 0.5496, 0.797, 0.569, 0.8219, 0.5496, 0.83, 0.559, 0.8219, 0.5496, 0.819, 0.573,
                          0.8219, 0.5496, 0.812, 0.561, 0.8219, 0.5496, 0.838, 0.544, 0.8219, 0.5496, 0.815, 0.548,
                          0.8219, 0.5496, 0.799, 0.548, 0.8219, 0.5496, 0.82, 0.548, 0.8219, 0.5496, 0.825, 0.547,
                          0.8219, 0.5496, 0.818, 0.575, 0.8219, 0.5496, 0.831, 0.566, 0.8219, 0.5496, 0.834, 0.542,
                          0.8219, 0.5496, 0.826, 0.581, 0.8219, 0.5496, 0.811, 0.548, 0.8219, 0.5496, 0.833, 0.527,
                          0.8219, 0.5496, 0.815, 0.577, 0.8219, 0.5496, 0.788, 0.537, 0.8219, 0.5496, 0.826, 0.552,
                          0.8219, 0.8219, 0.836, 0.827, 0.8219, 0.8219, 0.814, 0.814, 0.8219, 0.8219, 0.829, 0.81,
                          0.8219, 0.8219, 0.821, 0.827, 0.8219, 0.8219, 0.829, 0.832, 0.8219, 0.8219, 0.832, 0.807,
                          0.8219, 0.8219, 0.829, 0.807, 0.8219, 0.8219, 0.835, 0.799, 0.8219, 0.8219, 0.831, 0.811,
                          0.8219, 0.8219, 0.826, 0.833, 0.8219, 0.8219, 0.818, 0.792, 0.8219, 0.8219, 0.799, 0.831,
                          0.8219, 0.8219, 0.828, 0.836, 0.8219, 0.8219, 0.807, 0.817, 0.8219, 0.8219, 0.822, 0.829,
                          0.8219, 0.8219, 0.825, 0.821, 0.8219, 0.8219, 0.815, 0.818, 0.8219, 0.8219, 0.818, 0.805]
        pvalue03_truth = [0.0] * (3 * 3 * 3 * 2 * 2 * 2)
        pvalue032_truth = [0.4088, 0.4088, 0.3792, 0.3764, 0.4076, 0.4076, 0.3732, 0.3746, 0.4088, 0.4088, 0.3834,
                           0.374, 0.4076, 0.4076, 0.3822, 0.375, 0.4088, 0.4088, 0.3702, 0.3806, 0.4076, 0.4076,
                           0.3674, 0.3638, 0.627, 0.627, 0.6232, 0.6236, 0.6756, 0.6756, 0.6788, 0.6806, 0.627, 0.627,
                           0.622, 0.6254, 0.6756, 0.6756, 0.6872, 0.6812, 0.627, 0.627, 0.6196, 0.6076, 0.6756, 0.6756,
                           0.6858, 0.6656, 0.3051, 0.3051, 0.3054, 0.2956, 0.0052, 0.0052, 0.0058, 0.0048, 0.3746,
                           0.3746, 0.3776, 0.3668, 0.1631, 0.1631, 0.159, 0.1616, 0.4545, 0.4545, 0.4294, 0.4368,
                           0.4175, 0.4175, 0.3986, 0.403, 0.7353, 0.515, 0.7222, 0.5134, 0.7353, 0.515, 0.728, 0.5114,
                           0.7353, 0.515, 0.7336, 0.521, 0.7353, 0.515, 0.7426, 0.5166, 0.7353, 0.515, 0.7384, 0.5158,
                           0.7353, 0.515, 0.7204, 0.511, 0.7353, 0.515, 0.7322, 0.5132, 0.7353, 0.515, 0.7254, 0.5136,
                           0.7353, 0.515, 0.7328, 0.501, 0.7353, 0.515, 0.7272, 0.5022, 0.7353, 0.515, 0.7496, 0.5014,
                           0.7353, 0.515, 0.7306, 0.5048, 0.7353, 0.515, 0.7384, 0.5196, 0.7353, 0.515, 0.7268, 0.4944,
                           0.7353, 0.515, 0.741, 0.5042, 0.7353, 0.515, 0.7418, 0.5068, 0.7353, 0.515, 0.7352, 0.502,
                           0.7353, 0.515, 0.742, 0.516, 0.7353, 0.7353, 0.7388, 0.7398, 0.7353, 0.7353, 0.7348, 0.7432,
                           0.7353, 0.7353, 0.739, 0.7262, 0.7353, 0.7353, 0.7274, 0.7444, 0.7353, 0.7353, 0.7336,
                           0.7362, 0.7353, 0.7353, 0.7294, 0.7364, 0.7353, 0.7353, 0.7422, 0.7344, 0.7353, 0.7353,
                           0.7344, 0.7328, 0.7353, 0.7353, 0.7308, 0.7256, 0.7353, 0.7353, 0.7372, 0.7334, 0.7353,
                           0.7353, 0.7342, 0.7352, 0.7353, 0.7353, 0.7208, 0.7356, 0.7353, 0.7353, 0.7406, 0.734,
                           0.7353, 0.7353, 0.7338, 0.7362, 0.7353, 0.7353, 0.733, 0.737, 0.7353, 0.7353, 0.745, 0.7306,
                           0.7353, 0.7353, 0.7312, 0.742, 0.7353, 0.7353, 0.7418, 0.7364]
        self.assertEqual(pvalue01, pvalue01_truth)
        self.assertEqual(pvalue03, pvalue03_truth)
        self.assertEqual(pvalue032, pvalue032_truth)

    def test_Uniform_dist(self):
        np.random.seed(10)
        X = np.random.uniform(size=(300, 1))
        X_prime = np.random.uniform(size=(300, 1))
        Y = X + 0.5 * np.random.uniform(size=(300, 1))
        Z = Y + 0.5 * np.random.uniform(size=(300, 1))
        data = np.hstack((X, X_prime, Y, Z))

        pvalue01 = []
        pvalue03 = []
        pvalue032 = []
        for kernelname in ['Gaussian', 'Polynomial', 'Linear']:
            for est_width in ['empirical', 'median', 'manual']:
                for kwidth in [0.05, 0.1, 0.2]:
                    for use_gp in [True, False]:
                        for approx in [True, False]:
                            for polyd in [1, 2]:
                                cit_CIT = cit.CIT(data, 'kci', kernelX=kernelname, kernelY=kernelname,
                                                  kernelZ=kernelname, est_width=est_width, use_gp=use_gp, approx=approx,
                                                  polyd=polyd, kwidthx=kwidth, kwidthy=kwidth, kwidthz=kwidth)
                                pvalue01.append(round(cit_CIT(0, 1), 4))
                                # X and X_prime are independent, pvalue01 should be expected larger than 0.01
                                pvalue03.append(round(cit_CIT(0, 3), 4))
                                # X and Z are dependent, pvalue03 should be expected smaller than 0.01
                                pvalue032.append(round(cit_CIT(0, 3, {2}), 4))
                                # X and Z are independent conditional on Y, pvalue032 should be expected larger than
                                # 0.01
        pvalue01_truth = [0.8099, 0.8099, 0.815, 0.827, 0.8099, 0.8099, 0.821, 0.82, 0.8099, 0.8099, 0.852, 0.828,
                          0.8099, 0.8099, 0.83, 0.825, 0.8099, 0.8099, 0.831, 0.83, 0.8099, 0.8099, 0.813, 0.817,
                          0.7897, 0.7897, 0.809, 0.814, 0.7897, 0.7897, 0.788, 0.789, 0.7897, 0.7897, 0.798, 0.805,
                          0.7897, 0.7897, 0.803, 0.786, 0.7897, 0.7897, 0.804, 0.802, 0.7897, 0.7897, 0.793, 0.794,
                          0.603, 0.603, 0.595, 0.614, 0.603, 0.603, 0.603, 0.594, 0.455, 0.455, 0.438, 0.463, 0.455,
                          0.455, 0.435, 0.453, 0.4707, 0.4707, 0.466, 0.474, 0.4707, 0.4707, 0.481, 0.448, 0.7155,
                          0.4159, 0.711, 0.407, 0.7155, 0.4159, 0.714, 0.414, 0.7155, 0.4159, 0.739, 0.408, 0.7155,
                          0.4159, 0.706, 0.45, 0.7155, 0.4159, 0.711, 0.419, 0.7155, 0.4159, 0.726, 0.387, 0.7155,
                          0.4159, 0.711, 0.411, 0.7155, 0.4159, 0.725, 0.41, 0.7155, 0.4159, 0.732, 0.4, 0.7155,
                          0.4159, 0.747, 0.387, 0.7155, 0.4159, 0.733, 0.416, 0.7155, 0.4159, 0.706, 0.409, 0.7155,
                          0.4159, 0.712, 0.434, 0.7155, 0.4159, 0.72, 0.393, 0.7155, 0.4159, 0.736, 0.416, 0.7155,
                          0.4159, 0.719, 0.426, 0.7155, 0.4159, 0.717, 0.427, 0.7155, 0.4159, 0.725, 0.385, 0.7155,
                          0.7155, 0.741, 0.716, 0.7155, 0.7155, 0.725, 0.702, 0.7155, 0.7155, 0.693, 0.724, 0.7155,
                          0.7155, 0.709, 0.7, 0.7155, 0.7155, 0.729, 0.719, 0.7155, 0.7155, 0.729, 0.704, 0.7155,
                          0.7155, 0.719, 0.714, 0.7155, 0.7155, 0.716, 0.691, 0.7155, 0.7155, 0.722, 0.692, 0.7155,
                          0.7155, 0.737, 0.737, 0.7155, 0.7155, 0.726, 0.742, 0.7155, 0.7155, 0.725, 0.707, 0.7155,
                          0.7155, 0.731, 0.715, 0.7155, 0.7155, 0.68, 0.714, 0.7155, 0.7155, 0.725, 0.712, 0.7155,
                          0.7155, 0.705, 0.745, 0.7155, 0.7155, 0.725, 0.723, 0.7155, 0.7155, 0.711, 0.717]
        pvalue03_truth = [0.0] * (3 * 3 * 3 * 2 * 2 * 2)
        pvalue032_truth = [0.6393, 0.6393, 0.6354, 0.6396, 0.6124, 0.6124, 0.5972, 0.618, 0.6393, 0.6393, 0.639, 0.6288,
                           0.6124, 0.6124, 0.607, 0.6064, 0.6393, 0.6393, 0.6438, 0.6442, 0.6124, 0.6124, 0.613, 0.595,
                           0.8899, 0.8899, 0.9352, 0.934, 0.8887, 0.8887, 0.9308, 0.9344, 0.8899, 0.8899, 0.935, 0.9354,
                           0.8887, 0.8887, 0.9336, 0.939, 0.8899, 0.8899, 0.9382, 0.9378, 0.8887, 0.8887, 0.9312, 0.9352,
                           0.3415, 0.3415, 0.3424, 0.3398, 0.0007, 0.0007, 0.0002, 0.0008, 0.2514, 0.2514, 0.2478,
                           0.2574, 0.0169, 0.0169, 0.016, 0.0166, 0.5536, 0.5536, 0.5396, 0.5374, 0.3281, 0.3281,
                           0.3236, 0.3004, 0.3721, 0.6544, 0.3692, 0.6574, 0.3721, 0.6544, 0.3848, 0.6574, 0.3721,
                           0.6544, 0.3708, 0.6542, 0.3721, 0.6544, 0.3736, 0.667, 0.3721, 0.6544, 0.368, 0.6628,
                           0.3721, 0.6544, 0.3722, 0.6592, 0.3721, 0.6544, 0.3664, 0.6682, 0.3721, 0.6544, 0.3676,
                           0.6538, 0.3721, 0.6544, 0.3774, 0.6634, 0.3721, 0.6544, 0.3778, 0.6606, 0.3721, 0.6544,
                           0.377, 0.6578, 0.3721, 0.6544, 0.364, 0.6584, 0.3721, 0.6544, 0.3748, 0.6532, 0.3721,
                           0.6544, 0.366, 0.6612, 0.3721, 0.6544, 0.373, 0.6558, 0.3721, 0.6544, 0.366, 0.6638, 0.3721,
                           0.6544, 0.3654, 0.6658, 0.3721, 0.6544, 0.3744, 0.6598, 0.3721, 0.3721, 0.3686, 0.38, 0.3721,
                           0.3721, 0.3744, 0.3604, 0.3721, 0.3721, 0.3744, 0.3632, 0.3721, 0.3721, 0.383, 0.3834,
                           0.3721, 0.3721, 0.3694, 0.389, 0.3721, 0.3721, 0.3752, 0.3754, 0.3721, 0.3721, 0.3714,
                           0.3716, 0.3721, 0.3721, 0.3672, 0.3814, 0.3721, 0.3721, 0.3674, 0.3642, 0.3721, 0.3721,
                           0.37, 0.3584, 0.3721, 0.3721, 0.374, 0.374, 0.3721, 0.3721, 0.367, 0.3732, 0.3721, 0.3721,
                           0.3702, 0.3814, 0.3721, 0.3721, 0.3724, 0.3736, 0.3721, 0.3721, 0.3714, 0.3778, 0.3721,
                           0.3721, 0.368, 0.3626, 0.3721, 0.3721, 0.381, 0.3662, 0.3721, 0.3721, 0.3606, 0.3672]
        self.assertEqual(pvalue01, pvalue01_truth)
        self.assertEqual(pvalue03, pvalue03_truth)
        self.assertEqual(pvalue032, pvalue032_truth)

    def test_Mixed_dist(self):
        np.random.seed(10)
        X = np.random.uniform(size=(300, 1))
        X_prime = np.random.randn(300, 1)
        Y = X + 0.5 * np.random.exponential(size=(300, 1))
        Z = Y + 0.5 * np.random.randn(300, 1)
        data = np.hstack((X, X_prime, Y, Z))

        pvalue01 = []
        pvalue03 = []
        pvalue032 = []
        for kernelname in ['Gaussian', 'Polynomial', 'Linear']:
            for est_width in ['empirical', 'median', 'manual']:
                for kwidth in [0.05, 0.1, 0.2]:
                    for use_gp in [True, False]:
                        for approx in [True, False]:
                            for polyd in [1, 2]:
                                cit_CIT = cit.CIT(data, 'kci', kernelX=kernelname, kernelY=kernelname,
                                                  kernelZ=kernelname, est_width=est_width, use_gp=use_gp, approx=approx,
                                                  polyd=polyd, kwidthx=kwidth, kwidthy=kwidth, kwidthz=kwidth)
                                pvalue01.append(round(cit_CIT(0, 1), 4))
                                # X and X_prime are independent, pvalue01 should be expected larger than 0.01
                                pvalue03.append(round(cit_CIT(0, 3), 4))
                                # X and Z are dependent, pvalue03 should be expected smaller than 0.01
                                pvalue032.append(round(cit_CIT(0, 3, {2}), 4))
                                # X and Z are independent conditional on Y, pvalue032 should be expected larger than
                                # 0.01
        pvalue01_truth = [0.6565, 0.6565, 0.637, 0.668, 0.6565, 0.6565, 0.64, 0.659, 0.6565, 0.6565, 0.646, 0.632,
                          0.6565, 0.6565, 0.67, 0.646, 0.6565, 0.6565, 0.655, 0.668, 0.6565, 0.6565, 0.661, 0.663,
                          0.5346, 0.5346, 0.524, 0.507, 0.5346, 0.5346, 0.517, 0.511, 0.5346, 0.5346, 0.535, 0.514,
                          0.5346, 0.5346, 0.505, 0.526, 0.5346, 0.5346, 0.534, 0.518, 0.5346, 0.5346, 0.517, 0.507,
                          0.408, 0.408, 0.417, 0.395, 0.408, 0.408, 0.419, 0.411, 0.3017, 0.3017, 0.309, 0.292, 0.3017,
                          0.3017, 0.29, 0.296, 0.5735, 0.5735, 0.576, 0.572, 0.5735, 0.5735, 0.554, 0.573, 0.7537,
                          0.5882, 0.757, 0.574, 0.7537, 0.5882, 0.758, 0.578, 0.7537, 0.5882, 0.755, 0.557, 0.7537,
                          0.5882, 0.745, 0.576, 0.7537, 0.5882, 0.732, 0.59, 0.7537, 0.5882, 0.755, 0.595, 0.7537,
                          0.5882, 0.743, 0.587, 0.7537, 0.5882, 0.756, 0.577, 0.7537, 0.5882, 0.749, 0.596, 0.7537,
                          0.5882, 0.773, 0.583, 0.7537, 0.5882, 0.761, 0.588, 0.7537, 0.5882, 0.743, 0.607, 0.7537,
                          0.5882, 0.758, 0.566, 0.7537, 0.5882, 0.742, 0.604, 0.7537, 0.5882, 0.728, 0.582, 0.7537,
                          0.5882, 0.745, 0.6, 0.7537, 0.5882, 0.746, 0.635, 0.7537, 0.5882, 0.772, 0.593, 0.7537,
                          0.7537, 0.744, 0.748, 0.7537, 0.7537, 0.766, 0.762, 0.7537, 0.7537, 0.771, 0.736, 0.7537,
                          0.7537, 0.762, 0.744, 0.7537, 0.7537, 0.783, 0.753, 0.7537, 0.7537, 0.718, 0.75, 0.7537,
                          0.7537, 0.744, 0.752, 0.7537, 0.7537, 0.748, 0.728, 0.7537, 0.7537, 0.731, 0.747, 0.7537,
                          0.7537, 0.768, 0.778, 0.7537, 0.7537, 0.75, 0.745, 0.7537, 0.7537, 0.737, 0.76, 0.7537,
                          0.7537, 0.758, 0.737, 0.7537, 0.7537, 0.751, 0.778, 0.7537, 0.7537, 0.744, 0.755, 0.7537,
                          0.7537, 0.742, 0.729, 0.7537, 0.7537, 0.804, 0.743, 0.7537, 0.7537, 0.749, 0.765]
        pvalue03_truth = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1379, 0.1379, 0.112, 0.12,
                          0.1379, 0.1379, 0.135, 0.138, 0.0511, 0.0511, 0.057, 0.054, 0.0511, 0.0511, 0.058, 0.062,
                          0.0044, 0.0044, 0.005, 0.006, 0.0044, 0.0044, 0.007, 0.004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        pvalue032_truth = [0.1326, 0.1326, 0.1206, 0.1302, 0.1561, 0.1561, 0.1552, 0.151, 0.1326, 0.1326, 0.119,
                           0.1292, 0.1561, 0.1561, 0.144, 0.1454, 0.1326, 0.1326, 0.131, 0.1238, 0.1561, 0.1561,
                           0.1488, 0.1484, 0.1196, 0.1196, 0.1072, 0.1066, 0.1217, 0.1217, 0.1142, 0.1102, 0.1196,
                           0.1196, 0.1084, 0.1032, 0.1217, 0.1217, 0.1078, 0.112, 0.1196, 0.1196, 0.1092, 0.1102,
                           0.1217, 0.1217, 0.112, 0.114, 0.5044, 0.5044, 0.4954, 0.5168, 0.0021, 0.0021, 0.0022,
                           0.0016, 0.4773, 0.4773, 0.4658, 0.4738, 0.0586, 0.0586, 0.0574, 0.059, 0.5487, 0.5487,
                           0.548, 0.537, 0.3128, 0.3128, 0.2972, 0.313, 0.8637, 0.1417, 0.8634, 0.1356, 0.8637,
                           0.1417, 0.8672, 0.137, 0.8637, 0.1417, 0.8618, 0.1322, 0.8637, 0.1417, 0.8648, 0.1364,
                           0.8637, 0.1417, 0.872, 0.1348, 0.8637, 0.1417, 0.8584, 0.1364, 0.8637, 0.1417, 0.8646,
                           0.1348, 0.8637, 0.1417, 0.868, 0.1402, 0.8637, 0.1417, 0.8714, 0.132, 0.8637, 0.1417,
                           0.866, 0.1304, 0.8637, 0.1417, 0.868, 0.1426, 0.8637, 0.1417, 0.8692, 0.134, 0.8637,
                           0.1417, 0.8566, 0.142, 0.8637, 0.1417, 0.8556, 0.1282, 0.8637, 0.1417, 0.8678, 0.1428,
                           0.8637, 0.1417, 0.8606, 0.144, 0.8637, 0.1417, 0.8478, 0.1312, 0.8637, 0.1417, 0.8706,
                           0.1412, 0.8637, 0.8637, 0.8772, 0.862, 0.8637, 0.8637, 0.864, 0.8608, 0.8637, 0.8637,
                           0.8634, 0.872, 0.8637, 0.8637, 0.8602, 0.8616, 0.8637, 0.8637, 0.8688, 0.864, 0.8637,
                           0.8637, 0.8596, 0.868, 0.8637, 0.8637, 0.862, 0.8566, 0.8637, 0.8637, 0.8636, 0.8644,
                           0.8637, 0.8637, 0.8702, 0.856, 0.8637, 0.8637, 0.8538, 0.8638, 0.8637, 0.8637, 0.8584,
                           0.8504, 0.8637, 0.8637, 0.863, 0.8562, 0.8637, 0.8637, 0.8744, 0.8636, 0.8637, 0.8637,
                           0.8698, 0.8642, 0.8637, 0.8637, 0.8712, 0.8608, 0.8637, 0.8637, 0.8638, 0.8654, 0.8637,
                           0.8637, 0.8652, 0.8624, 0.8637, 0.8637, 0.8652, 0.8644]
        self.assertEqual(pvalue01, pvalue01_truth)
        self.assertEqual(pvalue03, pvalue03_truth)
        self.assertEqual(pvalue032, pvalue032_truth)
