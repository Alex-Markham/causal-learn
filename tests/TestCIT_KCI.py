import unittest

import numpy as np

import causallearn.utils.cit as cit


# TODO : Design more comprehensive test cases, including: design dataset of corner cases.
class TestCIT_KCI(unittest.TestCase):
    def test_Gaussian_dist(self):
        np.random.seed(10)
        X = np.random.randn(300, 1)
        X_prime = np.random.randn(300, 1)
        Y = X + 0.5 * np.random.randn(300, 1)
        Z = Y + 0.5 * np.random.randn(300, 1)
        data = np.hstack((X, X_prime, Y, Z))

        pvalue01 = []
        pvalue03 = []
        pvalue032 = []
        for kernelname in ['Gaussian', 'Polynomial', 'Linear']:
            for est_width in ['empirical', 'median', 'manual']:
                for kwidth in [0.05, 0.1, 0.2]:
                    for use_gp in [True, False]:
                        for approx in [True, False]:
                            for polyd in [1, 2]:
                                cit_CIT = cit.CIT(data, 'kci', kernelX=kernelname, kernelY=kernelname,
                                                  kernelZ=kernelname, est_width=est_width, use_gp=use_gp, approx=approx,
                                                  polyd=polyd, kwidthx=kwidth, kwidthy=kwidth, kwidthz=kwidth)
                                pvalue01.append(round(cit_CIT(0, 1), 3))
                                # X and X_prime are independent, pvalue01 should be expected larger than 0.01
                                pvalue03.append(round(cit_CIT(0, 3), 3))
                                # X and Z are dependent, pvalue03 should be expected smaller than 0.01
                                pvalue032.append(round(cit_CIT(0, 3, {2}), 3))
                                # X and Z are independent conditional on Y, pvalue032 should be expected larger than
                                # 0.01
        pvalue01_truth = [0.54, 0.54, 0.505, 0.53, 0.54, 0.54, 0.506, 0.515, 0.54, 0.54, 0.494, 0.536, 0.54, 0.54,
                          0.526, 0.523, 0.54, 0.54, 0.519, 0.526, 0.54, 0.54, 0.51, 0.51, 0.611, 0.611, 0.63, 0.602,
                          0.611, 0.611, 0.608, 0.611, 0.611, 0.611, 0.628, 0.616, 0.611, 0.611, 0.588, 0.623, 0.611,
                          0.611, 0.62, 0.624, 0.611, 0.611, 0.632, 0.601, 0.466, 0.466, 0.458, 0.479, 0.466, 0.466,
                          0.457, 0.479, 0.645, 0.645, 0.643, 0.647, 0.645, 0.645, 0.636, 0.649, 0.773, 0.773, 0.792,
                          0.78, 0.773, 0.773, 0.792, 0.774, 0.274, 0.161, 0.286, 0.169, 0.274, 0.161, 0.27, 0.183,
                          0.274, 0.161, 0.247, 0.172, 0.274, 0.161, 0.292, 0.173, 0.274, 0.161, 0.298, 0.143, 0.274,
                          0.161, 0.268, 0.152, 0.274, 0.161, 0.274, 0.159, 0.274, 0.161, 0.277, 0.161, 0.274, 0.161,
                          0.272, 0.173, 0.274, 0.161, 0.293, 0.161, 0.274, 0.161, 0.277, 0.157, 0.274, 0.161, 0.268,
                          0.158, 0.274, 0.161, 0.278, 0.165, 0.274, 0.161, 0.261, 0.162, 0.274, 0.161, 0.25, 0.157,
                          0.274, 0.161, 0.287, 0.158, 0.274, 0.161, 0.275, 0.157, 0.274, 0.161, 0.282, 0.16, 0.274,
                          0.274, 0.272, 0.291, 0.274, 0.274, 0.266, 0.258, 0.274, 0.274, 0.251, 0.293, 0.274, 0.274,
                          0.293, 0.277, 0.274, 0.274, 0.283, 0.279, 0.274, 0.274, 0.284, 0.305, 0.274, 0.274, 0.295,
                          0.273, 0.274, 0.274, 0.267, 0.321, 0.274, 0.274, 0.278, 0.287, 0.274, 0.274, 0.299, 0.279,
                          0.274, 0.274, 0.263, 0.294, 0.274, 0.274, 0.261, 0.269, 0.274, 0.274, 0.276, 0.265, 0.274,
                          0.274, 0.271, 0.268, 0.274, 0.274, 0.267, 0.278, 0.274, 0.274, 0.272, 0.295, 0.274, 0.274,
                          0.272, 0.248, 0.274, 0.274, 0.278, 0.279]
        pvalue03_truth = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003, 0.003, 0.005, 0.007,
                          0.003, 0.003, 0.003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0]
        pvalue032_truth = [0.609, 0.609, 0.596, 0.601, 0.582, 0.582, 0.574, 0.572, 0.609, 0.609, 0.6, 0.603, 0.582,
                           0.582, 0.557, 0.569, 0.609, 0.609, 0.601, 0.596, 0.582, 0.582, 0.562, 0.58, 0.616, 0.616,
                           0.628, 0.615, 0.619, 0.619, 0.626, 0.614, 0.616, 0.616, 0.629, 0.61, 0.619, 0.619, 0.621,
                           0.627, 0.616, 0.616, 0.614, 0.624, 0.619, 0.619, 0.62, 0.618, 0.54, 0.54, 0.562, 0.555,
                           0.005, 0.005, 0.006, 0.005, 0.676, 0.676, 0.666, 0.679, 0.137, 0.137, 0.134, 0.139, 0.856,
                           0.856, 0.869, 0.865, 0.752, 0.752, 0.745, 0.749, 0.911, 0.247, 0.91, 0.23, 0.911, 0.247,
                           0.917, 0.223, 0.911, 0.247, 0.91, 0.225, 0.911, 0.247, 0.912, 0.239, 0.911, 0.247, 0.911,
                           0.231, 0.911, 0.247, 0.907, 0.229, 0.911, 0.247, 0.914, 0.227, 0.911, 0.247, 0.911, 0.226,
                           0.911, 0.247, 0.91, 0.239, 0.911, 0.247, 0.908, 0.227, 0.911, 0.247, 0.914, 0.223, 0.911,
                           0.247, 0.91, 0.226, 0.911, 0.247, 0.908, 0.23, 0.911, 0.247, 0.908, 0.236, 0.911, 0.247,
                           0.914, 0.231, 0.911, 0.247, 0.906, 0.227, 0.911, 0.247, 0.905, 0.232, 0.911, 0.247, 0.912,
                           0.229, 0.911, 0.911, 0.911, 0.911, 0.911, 0.911, 0.908, 0.909, 0.911, 0.911, 0.915, 0.912,
                           0.911, 0.911, 0.912, 0.919, 0.911, 0.911, 0.917, 0.911, 0.911, 0.911, 0.909, 0.914, 0.911,
                           0.911, 0.913, 0.914, 0.911, 0.911, 0.908, 0.908, 0.911, 0.911, 0.916, 0.915, 0.911, 0.911,
                           0.911, 0.916, 0.911, 0.911, 0.909, 0.91, 0.911, 0.911, 0.914, 0.913, 0.911, 0.911, 0.906,
                           0.906, 0.911, 0.911, 0.906, 0.907, 0.911, 0.911, 0.914, 0.905, 0.911, 0.911, 0.917, 0.907,
                           0.911, 0.911, 0.913, 0.92, 0.911, 0.911, 0.914, 0.905]
        self.assertEqual(pvalue01, pvalue01_truth)
        self.assertEqual(pvalue03, pvalue03_truth)
        self.assertEqual(pvalue032, pvalue032_truth)

    def test_Exponential_dist(self):
        np.random.seed(10)
        X = np.random.exponential(size=(300, 1))
        X_prime = np.random.exponential(size=(300, 1))
        Y = X + 0.5 * np.random.exponential(size=(300, 1))
        Z = Y + 0.5 * np.random.exponential(size=(300, 1))
        data = np.hstack((X, X_prime, Y, Z))

        pvalue01 = []
        pvalue03 = []
        pvalue032 = []
        for kernelname in ['Gaussian', 'Polynomial', 'Linear']:
            for est_width in ['empirical', 'median', 'manual']:
                for kwidth in [0.05, 0.1, 0.2]:
                    for use_gp in [True, False]:
                        for approx in [True, False]:
                            for polyd in [1, 2]:
                                cit_CIT = cit.CIT(data, 'kci', kernelX=kernelname, kernelY=kernelname,
                                                  kernelZ=kernelname, est_width=est_width, use_gp=use_gp, approx=approx,
                                                  polyd=polyd, kwidthx=kwidth, kwidthy=kwidth, kwidthz=kwidth)
                                pvalue01.append(round(cit_CIT(0, 1), 3))
                                # X and X_prime are independent, pvalue01 should be expected larger than 0.01
                                pvalue03.append(round(cit_CIT(0, 3), 3))
                                # X and Z are dependent, pvalue03 should be expected smaller than 0.01
                                pvalue032.append(round(cit_CIT(0, 3, {2}), 3))
                                # X and Z are independent conditional on Y, pvalue032 should be expected larger than
                                # 0.01
        pvalue01_truth = [0.852, 0.852, 0.872, 0.879, 0.852, 0.852, 0.882, 0.883, 0.852, 0.852, 0.906, 0.884, 0.852,
                          0.852, 0.883, 0.872, 0.852, 0.852, 0.871, 0.875, 0.852, 0.852, 0.9, 0.875, 0.581, 0.581, 0.57,
                          0.561, 0.581, 0.581, 0.567, 0.563, 0.581, 0.581, 0.58, 0.577, 0.581, 0.581, 0.559, 0.568,
                          0.581, 0.581, 0.578, 0.562, 0.581, 0.581, 0.586, 0.563, 0.456, 0.456, 0.44, 0.45, 0.456,
                          0.456, 0.419, 0.439, 0.42, 0.42, 0.389, 0.417, 0.42, 0.42, 0.365, 0.394, 0.881, 0.881, 0.887,
                          0.883, 0.881, 0.881, 0.889, 0.902, 0.822, 0.55, 0.815, 0.534, 0.822, 0.55, 0.824, 0.559,
                          0.822, 0.55, 0.829, 0.564, 0.822, 0.55, 0.847, 0.558, 0.822, 0.55, 0.832, 0.53, 0.822, 0.55,
                          0.824, 0.525, 0.822, 0.55, 0.81, 0.551, 0.822, 0.55, 0.821, 0.536, 0.822, 0.55, 0.817, 0.557,
                          0.822, 0.55, 0.823, 0.509, 0.822, 0.55, 0.829, 0.566, 0.822, 0.55, 0.807, 0.56, 0.822, 0.55,
                          0.817, 0.548, 0.822, 0.55, 0.839, 0.556, 0.822, 0.55, 0.838, 0.55, 0.822, 0.55, 0.815, 0.551,
                          0.822, 0.55, 0.831, 0.565, 0.822, 0.55, 0.819, 0.581, 0.822, 0.822, 0.814, 0.816, 0.822,
                          0.822, 0.815, 0.814, 0.822, 0.822, 0.822, 0.824, 0.822, 0.822, 0.825, 0.829, 0.822, 0.822,
                          0.819, 0.839, 0.822, 0.822, 0.828, 0.827, 0.822, 0.822, 0.84, 0.814, 0.822, 0.822, 0.813,
                          0.824, 0.822, 0.822, 0.807, 0.846, 0.822, 0.822, 0.818, 0.825, 0.822, 0.822, 0.83, 0.82,
                          0.822, 0.822, 0.82, 0.811, 0.822, 0.822, 0.817, 0.828, 0.822, 0.822, 0.806, 0.829, 0.822,
                          0.822, 0.808, 0.795, 0.822, 0.822, 0.805, 0.83, 0.822, 0.822, 0.826, 0.815, 0.822, 0.822,
                          0.819, 0.82]
        pvalue03_truth = [0.0] * (3 * 3 * 3 * 2 * 2 * 2)
        pvalue032_truth = [0.409, 0.409, 0.379, 0.371, 0.392, 0.392, 0.357, 0.366, 0.409, 0.409, 0.378, 0.375, 0.392,
                           0.392, 0.363, 0.361, 0.409, 0.409, 0.377, 0.393, 0.392, 0.392, 0.368, 0.359, 0.627, 0.627,
                           0.636, 0.617, 0.663, 0.663, 0.66, 0.67, 0.627, 0.627, 0.623, 0.621, 0.663, 0.663, 0.67,
                           0.664, 0.627, 0.627, 0.622, 0.633, 0.663, 0.663, 0.663, 0.665, 0.305, 0.305, 0.306, 0.294,
                           0.01, 0.01, 0.009, 0.01, 0.374, 0.374, 0.359, 0.357, 0.188, 0.188, 0.189, 0.187, 0.454,
                           0.454, 0.439, 0.429, 0.422, 0.422, 0.414, 0.409, 0.735, 0.515, 0.734, 0.513, 0.735, 0.515,
                           0.728, 0.492, 0.735, 0.515, 0.742, 0.519, 0.735, 0.515, 0.737, 0.51, 0.735, 0.515, 0.719,
                           0.519, 0.735, 0.515, 0.736, 0.506, 0.735, 0.515, 0.734, 0.501, 0.735, 0.515, 0.733, 0.519,
                           0.735, 0.515, 0.722, 0.504, 0.735, 0.515, 0.738, 0.515, 0.735, 0.515, 0.734, 0.498, 0.735,
                           0.515, 0.731, 0.505, 0.735, 0.515, 0.737, 0.517, 0.735, 0.515, 0.737, 0.51, 0.735, 0.515,
                           0.745, 0.511, 0.735, 0.515, 0.733, 0.512, 0.735, 0.515, 0.733, 0.521, 0.735, 0.515, 0.728,
                           0.518, 0.735, 0.735, 0.734, 0.73, 0.735, 0.735, 0.73, 0.743, 0.735, 0.735, 0.724, 0.736,
                           0.735, 0.735, 0.734, 0.728, 0.735, 0.735, 0.735, 0.746, 0.735, 0.735, 0.74, 0.74, 0.735,
                           0.735, 0.729, 0.744, 0.735, 0.735, 0.735, 0.721, 0.735, 0.735, 0.744, 0.745, 0.735, 0.735,
                           0.741, 0.732, 0.735, 0.735, 0.735, 0.733, 0.735, 0.735, 0.738, 0.737, 0.735, 0.735, 0.731,
                           0.741, 0.735, 0.735, 0.733, 0.737, 0.735, 0.735, 0.725, 0.74, 0.735, 0.735, 0.735, 0.734,
                           0.735, 0.735, 0.721, 0.735, 0.735, 0.735, 0.733, 0.731]
        self.assertEqual(pvalue01, pvalue01_truth)
        self.assertEqual(pvalue03, pvalue03_truth)
        self.assertEqual(pvalue032, pvalue032_truth)

    def test_Uniform_dist(self):
        np.random.seed(10)
        X = np.random.uniform(size=(300, 1))
        X_prime = np.random.uniform(size=(300, 1))
        Y = X + 0.5 * np.random.uniform(size=(300, 1))
        Z = Y + 0.5 * np.random.uniform(size=(300, 1))
        data = np.hstack((X, X_prime, Y, Z))

        pvalue01 = []
        pvalue03 = []
        pvalue032 = []
        for kernelname in ['Gaussian', 'Polynomial', 'Linear']:
            for est_width in ['empirical', 'median', 'manual']:
                for kwidth in [0.05, 0.1, 0.2]:
                    for use_gp in [True, False]:
                        for approx in [True, False]:
                            for polyd in [1, 2]:
                                cit_CIT = cit.CIT(data, 'kci', kernelX=kernelname, kernelY=kernelname,
                                                  kernelZ=kernelname, est_width=est_width, use_gp=use_gp, approx=approx,
                                                  polyd=polyd, kwidthx=kwidth, kwidthy=kwidth, kwidthz=kwidth)
                                pvalue01.append(round(cit_CIT(0, 1), 3))
                                # X and X_prime are independent, pvalue01 should be expected larger than 0.01
                                pvalue03.append(round(cit_CIT(0, 3), 3))
                                # X and Z are dependent, pvalue03 should be expected smaller than 0.01
                                pvalue032.append(round(cit_CIT(0, 3, {2}), 3))
                                # X and Z are independent conditional on Y, pvalue032 should be expected larger than
                                # 0.01
        pvalue01_truth = [0.81, 0.81, 0.815, 0.815, 0.81, 0.81, 0.834, 0.806, 0.81, 0.81, 0.831, 0.835, 0.81, 0.81,
                          0.821, 0.781, 0.81, 0.81, 0.821, 0.807, 0.81, 0.81, 0.822, 0.829, 0.789, 0.789, 0.793, 0.802,
                          0.789, 0.789, 0.794, 0.795, 0.789, 0.789, 0.801, 0.805, 0.789, 0.789, 0.792, 0.802, 0.789,
                          0.789, 0.782, 0.82, 0.789, 0.789, 0.787, 0.808, 0.604, 0.604, 0.609, 0.61, 0.604, 0.604,
                          0.604, 0.604, 0.455, 0.455, 0.446, 0.424, 0.455, 0.455, 0.442, 0.469, 0.47, 0.47, 0.453,
                          0.454, 0.47, 0.47, 0.459, 0.479, 0.716, 0.416, 0.669, 0.392, 0.716, 0.416, 0.733, 0.4, 0.716,
                          0.416, 0.722, 0.395, 0.716, 0.416, 0.72, 0.399, 0.716, 0.416, 0.707, 0.395, 0.716, 0.416,
                          0.719, 0.426, 0.716, 0.416, 0.746, 0.39, 0.716, 0.416, 0.702, 0.42, 0.716, 0.416, 0.729,
                          0.399, 0.716, 0.416, 0.699, 0.374, 0.716, 0.416, 0.733, 0.392, 0.716, 0.416, 0.719, 0.404,
                          0.716, 0.416, 0.715, 0.395, 0.716, 0.416, 0.707, 0.415, 0.716, 0.416, 0.735, 0.41, 0.716,
                          0.416, 0.721, 0.422, 0.716, 0.416, 0.736, 0.456, 0.716, 0.416, 0.709, 0.374, 0.716, 0.716,
                          0.7, 0.724, 0.716, 0.716, 0.717, 0.715, 0.716, 0.716, 0.706, 0.741, 0.716, 0.716, 0.726,
                          0.72, 0.716, 0.716, 0.724, 0.696, 0.716, 0.716, 0.702, 0.721, 0.716, 0.716, 0.737, 0.711,
                          0.716, 0.716, 0.727, 0.706, 0.716, 0.716, 0.709, 0.696, 0.716, 0.716, 0.707, 0.709, 0.716,
                          0.716, 0.73, 0.703, 0.716, 0.716, 0.73, 0.727, 0.716, 0.716, 0.722, 0.716, 0.716, 0.716,
                          0.727, 0.735, 0.716, 0.716, 0.705, 0.735, 0.716, 0.716, 0.707, 0.725, 0.716, 0.716, 0.71,
                          0.725, 0.716, 0.716, 0.699, 0.682]
        pvalue03_truth = [0.0] * (3 * 3 * 3 * 2 * 2 * 2)
        pvalue032_truth = [0.639, 0.639, 0.638, 0.632, 0.622, 0.622, 0.619, 0.631, 0.639, 0.639, 0.636, 0.635, 0.622,
                           0.622, 0.605, 0.611, 0.639, 0.639, 0.634, 0.639, 0.622, 0.622, 0.616, 0.617, 0.89, 0.89,
                           0.933, 0.93, 0.885, 0.885, 0.926, 0.931, 0.89, 0.89, 0.935, 0.93, 0.885, 0.885, 0.929,
                           0.926, 0.89, 0.89, 0.932, 0.937, 0.885, 0.885, 0.926, 0.936, 0.342, 0.342, 0.342, 0.343,
                           0.002, 0.002, 0.002, 0.001, 0.251, 0.251, 0.258, 0.245, 0.027, 0.027, 0.031, 0.027, 0.553,
                           0.553, 0.53, 0.531, 0.358, 0.358, 0.339, 0.344, 0.372, 0.654, 0.374, 0.659, 0.372, 0.654,
                           0.387, 0.655, 0.372, 0.654, 0.37, 0.663, 0.372, 0.654, 0.368, 0.654, 0.372, 0.654, 0.373,
                           0.662, 0.372, 0.654, 0.389, 0.66, 0.372, 0.654, 0.372, 0.663, 0.372, 0.654, 0.374, 0.666,
                           0.372, 0.654, 0.371, 0.663, 0.372, 0.654, 0.369, 0.67, 0.372, 0.654, 0.378, 0.668, 0.372,
                           0.654, 0.368, 0.667, 0.372, 0.654, 0.384, 0.657, 0.372, 0.654, 0.368, 0.659, 0.372, 0.654,
                           0.365, 0.667, 0.372, 0.654, 0.363, 0.665, 0.372, 0.654, 0.371, 0.663, 0.372, 0.654, 0.365,
                           0.663, 0.372, 0.372, 0.354, 0.375, 0.372, 0.372, 0.367, 0.388, 0.372, 0.372, 0.378, 0.373,
                           0.372, 0.372, 0.372, 0.371, 0.372, 0.372, 0.381, 0.373, 0.372, 0.372, 0.377, 0.371, 0.372,
                           0.372, 0.361, 0.373, 0.372, 0.372, 0.364, 0.363, 0.372, 0.372, 0.375, 0.371, 0.372, 0.372,
                           0.365, 0.39, 0.372, 0.372, 0.364, 0.375, 0.372, 0.372, 0.365, 0.369, 0.372, 0.372, 0.37,
                           0.376, 0.372, 0.372, 0.368, 0.374, 0.372, 0.372, 0.368, 0.366, 0.372, 0.372, 0.369, 0.374,
                           0.372, 0.372, 0.37, 0.371, 0.372, 0.372, 0.365, 0.361]
        self.assertEqual(pvalue01, pvalue01_truth)
        self.assertEqual(pvalue03, pvalue03_truth)
        self.assertEqual(pvalue032, pvalue032_truth)

    def test_Mixed_dist(self):
        np.random.seed(10)
        X = np.random.uniform(size=(300, 1))
        X_prime = np.random.randn(300, 1)
        Y = X + 0.5 * np.random.exponential(size=(300, 1))
        Z = Y + 0.5 * np.random.randn(300, 1)
        data = np.hstack((X, X_prime, Y, Z))

        pvalue01 = []
        pvalue03 = []
        pvalue032 = []
        for kernelname in ['Gaussian', 'Polynomial', 'Linear']:
            for est_width in ['empirical', 'median', 'manual']:
                for kwidth in [0.05, 0.1, 0.2]:
                    for use_gp in [True, False]:
                        for approx in [True, False]:
                            for polyd in [1, 2]:
                                cit_CIT = cit.CIT(data, 'kci', kernelX=kernelname, kernelY=kernelname,
                                                  kernelZ=kernelname, est_width=est_width, use_gp=use_gp, approx=approx,
                                                  polyd=polyd, kwidthx=kwidth, kwidthy=kwidth, kwidthz=kwidth)
                                pvalue01.append(round(cit_CIT(0, 1), 3))
                                # X and X_prime are independent, pvalue01 should be expected larger than 0.01
                                pvalue03.append(round(cit_CIT(0, 3), 3))
                                # X and Z are dependent, pvalue03 should be expected smaller than 0.01
                                pvalue032.append(round(cit_CIT(0, 3, {2}), 3))
                                # X and Z are independent conditional on Y, pvalue032 should be expected larger than
                                # 0.01
        pvalue01_truth = [0.656, 0.656, 0.636, 0.625, 0.656, 0.656, 0.66, 0.677, 0.656, 0.656, 0.618, 0.644, 0.656,
                          0.656, 0.664, 0.63, 0.656, 0.656, 0.666, 0.639, 0.656, 0.656, 0.63, 0.623, 0.534, 0.534,
                          0.526, 0.529, 0.534, 0.534, 0.525, 0.529, 0.534, 0.534, 0.524, 0.538, 0.534, 0.534, 0.499,
                          0.542, 0.534, 0.534, 0.509, 0.518, 0.534, 0.534, 0.527, 0.519, 0.408, 0.408, 0.413, 0.411,
                          0.408, 0.408, 0.428, 0.382, 0.301, 0.301, 0.297, 0.31, 0.301, 0.301, 0.304, 0.302, 0.573,
                          0.573, 0.574, 0.571, 0.573, 0.573, 0.571, 0.573, 0.754, 0.588, 0.756, 0.599, 0.754, 0.588,
                          0.761, 0.59, 0.754, 0.588, 0.744, 0.594, 0.754, 0.588, 0.757, 0.578, 0.754, 0.588, 0.753,
                          0.584, 0.754, 0.588, 0.773, 0.592, 0.754, 0.588, 0.749, 0.611, 0.754, 0.588, 0.769, 0.582,
                          0.754, 0.588, 0.735, 0.563, 0.754, 0.588, 0.751, 0.567, 0.754, 0.588, 0.768, 0.605, 0.754,
                          0.588, 0.753, 0.567, 0.754, 0.588, 0.736, 0.608, 0.754, 0.588, 0.748, 0.565, 0.754, 0.588,
                          0.77, 0.594, 0.754, 0.588, 0.767, 0.616, 0.754, 0.588, 0.747, 0.584, 0.754, 0.588, 0.741,
                          0.58, 0.754, 0.754, 0.755, 0.752, 0.754, 0.754, 0.737, 0.757, 0.754, 0.754, 0.762, 0.745,
                          0.754, 0.754, 0.74, 0.749, 0.754, 0.754, 0.757, 0.751, 0.754, 0.754, 0.742, 0.752, 0.754,
                          0.754, 0.753, 0.766, 0.754, 0.754, 0.753, 0.746, 0.754, 0.754, 0.75, 0.77, 0.754, 0.754,
                          0.756, 0.746, 0.754, 0.754, 0.738, 0.753, 0.754, 0.754, 0.766, 0.749, 0.754, 0.754, 0.744,
                          0.74, 0.754, 0.754, 0.765, 0.725, 0.754, 0.754, 0.753, 0.766, 0.754, 0.754, 0.753, 0.749,
                          0.754, 0.754, 0.75, 0.759, 0.754, 0.754, 0.744, 0.771]
        pvalue03_truth = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.138, 0.138, 0.143, 0.113,
                          0.138, 0.138, 0.141, 0.15, 0.051, 0.051, 0.066, 0.057, 0.051, 0.051, 0.056, 0.048, 0.004,
                          0.004, 0.006, 0.002, 0.004, 0.004, 0.004, 0.015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        pvalue032_truth = [0.133, 0.133, 0.119, 0.126, 0.142, 0.142, 0.142, 0.134, 0.133, 0.133, 0.121, 0.128, 0.142,
                           0.142, 0.132, 0.13, 0.133, 0.133, 0.131, 0.12, 0.142, 0.142, 0.141, 0.135, 0.12, 0.12,
                           0.114, 0.116, 0.116, 0.116, 0.109, 0.108, 0.12, 0.12, 0.105, 0.105, 0.116, 0.116, 0.105,
                           0.101, 0.12, 0.12, 0.108, 0.108, 0.116, 0.116, 0.108, 0.105, 0.504, 0.504, 0.494, 0.518,
                           0.005, 0.005, 0.005, 0.005, 0.477, 0.477, 0.473, 0.479, 0.076, 0.076, 0.076, 0.077, 0.549,
                           0.549, 0.543, 0.538, 0.362, 0.362, 0.339, 0.355, 0.864, 0.142, 0.866, 0.137, 0.864, 0.142,
                           0.864, 0.135, 0.864, 0.142, 0.862, 0.138, 0.864, 0.142, 0.861, 0.14, 0.864, 0.142, 0.854,
                           0.136, 0.864, 0.142, 0.861, 0.136, 0.864, 0.142, 0.86, 0.137, 0.864, 0.142, 0.872, 0.134,
                           0.864, 0.142, 0.871, 0.135, 0.864, 0.142, 0.866, 0.125, 0.864, 0.142, 0.854, 0.131, 0.864,
                           0.142, 0.869, 0.138, 0.864, 0.142, 0.863, 0.133, 0.864, 0.142, 0.862, 0.133, 0.864, 0.142,
                           0.86, 0.141, 0.864, 0.142, 0.867, 0.131, 0.864, 0.142, 0.862, 0.143, 0.864, 0.142, 0.868,
                           0.145, 0.864, 0.864, 0.869, 0.868, 0.864, 0.864, 0.876, 0.859, 0.864, 0.864, 0.859, 0.862,
                           0.864, 0.864, 0.866, 0.869, 0.864, 0.864, 0.868, 0.867, 0.864, 0.864, 0.864, 0.861, 0.864,
                           0.864, 0.848, 0.861, 0.864, 0.864, 0.874, 0.869, 0.864, 0.864, 0.869, 0.87, 0.864, 0.864,
                           0.86, 0.866, 0.864, 0.864, 0.862, 0.86, 0.864, 0.864, 0.864, 0.876, 0.864, 0.864, 0.871,
                           0.864, 0.864, 0.864, 0.869, 0.873, 0.864, 0.864, 0.849, 0.861, 0.864, 0.864, 0.865, 0.866,
                           0.864, 0.864, 0.872, 0.867, 0.864, 0.864, 0.86, 0.857]
        self.assertEqual(pvalue01, pvalue01_truth)
        self.assertEqual(pvalue03, pvalue03_truth)
        self.assertEqual(pvalue032, pvalue032_truth)
